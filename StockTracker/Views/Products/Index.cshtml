@model IEnumerable<StockTracker.Models.Product>

@{
    ViewData["Title"] = "Products";
}

<h1>Products</h1>

<!-- Настройки отправки уведомлений -->
<div>
    <form id="notificationForm" asp-action="SendNotifications" method="post">
        @if (ViewBag.Services != null)
        {
            @foreach (var service in ViewBag.Services)
            {
                <label>
                    <input type="checkbox" name="servicePreferences[@service.ServiceName]" value="true" @(service.IsEnabled ? "checked" : "") />
                    Enable @service.ServiceName Notifications
                </label>
                <br />
            }
        }
        <div>
            <label>
                Frequency (minutes):
                <input type="number" name="frequencyInMinutes" id="frequencyInput" value="@ViewBag.FrequencyInMinutes" min="1" class="form-control" />
            </label>
        </div>
        <button type="submit" id="startButton" class="btn btn-success">Start</button>

        <!-- Таймер обратного отсчета -->
        <div>
            <h3>Next notification in: <span id="countdownTimer">00:00</span></h3>
        </div>
    </form>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById("notificationForm");
            const countdownDisplay = document.getElementById("countdownTimer");
            let countdownInterval;

            function startCountdown(frequencyInMinutes) {
                let timeLeft = frequencyInMinutes * 60;
                updateDisplay(timeLeft);
                countdownInterval = setInterval(function() {
                    timeLeft--;
                    if (timeLeft < 0) {
                        clearInterval(countdownInterval);

                        return;
                    }
                    updateDisplay(timeLeft);
                }, 1000);
            }

            function updateDisplay(timeLeft) {
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                countdownDisplay.textContent =
                    `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }

            form.addEventListener("submit", function(e) {
                e.preventDefault(); // Отменяем стандартную отправку формы

                // Получаем значение частоты из поля ввода
                const frequencyInput = document.getElementById("frequencyInput");
                const frequencyInMinutes = parseInt(frequencyInput.value);

                // Запускаем обратный отсчет
                startCountdown(frequencyInMinutes);

                // Отправляем данные формы на сервер через AJAX
                const formData = new FormData(form);
                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    // Если сервер выполняет Redirect, можно обработать это так:
                    if (response.redirected) {
                        window.location.href = response.url;
                    }
                    return response.text();
                })
                .then(data => {
                    console.log("Server response:", data);
                    // Дополнительная обработка ответа сервера, если необходимо
                })
                .catch(error => console.error('Ошибка:', error));
            });
        });
    </script>
</div>

<p>
    <a asp-action="Create">Create New</a>
</p>

<!-- Таблица с товарами -->
<table class="table">
    <thead>
        <tr>
            <th style="width: 13%;">
                @Html.DisplayNameFor(model => model.Shop)
            </th>
            <th style="width: 40%;">
                @Html.DisplayNameFor(model => model.ProductName)
            </th>
            <th style="width: 15%;">
                @Html.DisplayNameFor(model => model.ProductCount)
            </th>
            <th style="width: 13%;">
                @Html.DisplayNameFor(model => model.ParseDate)
            </th>
            <th style="width: 5%;">
                @Html.DisplayNameFor(model => model.IsTracked)
            </th>
            <th style="width: 10%;"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Shop)
                </td>
                <td>
                    @Html.Raw($"<a href='{item.Link}' target='_blank' rel='noopener noreferrer'>{item.ProductName}</a>")
                </td>
                <td>
                    @* Здесь надо будет сделать цикл суммирующий все товары с одинаковым ProductName *@
                    <a asp-action="Statistics" asp-route-ProductName="@item.ProductName" asp-route-Shop="@item.Shop">@Html.DisplayFor(modelItem => item.ProductCount)</a>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ParseDate)
                </td>
                <td>
                    <form asp-action="UpdateIsTracked" method="post" style="display:inline;">
                        <input type="hidden" name="id" value="@item.Id" />
                        <input type="checkbox" name="isTracked" value="true"
                        @(item.IsTracked ? "checked" : "")
                               onchange="this.form.submit();" />
                    </form>
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

